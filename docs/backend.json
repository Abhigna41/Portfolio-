{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project showcased in the portfolio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the project entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the project."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the project."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the project's image.",
          "format": "uri"
        },
        "link": {
          "type": "string",
          "description": "URL to the live project or its repository.",
          "format": "uri"
        },
        "order": {
          "type": "number",
          "description": "The order in which the project is displayed."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "imageUrl",
        "link",
        "order"
      ]
    },
    "Skill": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Skill",
      "type": "object",
      "description": "Represents a skill or competency.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the skill entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the skill."
        },
        "level": {
          "type": "number",
          "description": "Proficiency level of the skill (e.g., 1-5)."
        },
        "icon": {
          "type": "string",
          "description": "Icon representing the skill."
        },
        "order": {
          "type": "number",
          "description": "The order in which the skill is displayed."
        }
      },
      "required": [
        "id",
        "name",
        "level",
        "icon",
        "order"
      ]
    },
    "AboutMe": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AboutMe",
      "type": "object",
      "description": "Represents the 'About Me' information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the about me section. Should only be one of these."
        },
        "bio": {
          "type": "string",
          "description": "Biography text."
        },
        "photoUrl": {
          "type": "string",
          "description": "URL of the profile photo.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "bio",
        "photoUrl"
      ]
    },
    "ContactMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContactMessage",
      "type": "object",
      "description": "Represents a message sent through the contact form.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contact message."
        },
        "name": {
          "type": "string",
          "description": "Name of the sender."
        },
        "email": {
          "type": "string",
          "description": "Email address of the sender.",
          "format": "email"
        },
        "message": {
          "type": "string",
          "description": "The message content."
        },
        "sentAt": {
          "type": "string",
          "description": "Timestamp indicating when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "sentAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project information for the portfolio.",
          "params": [
            {
              "name": "projectId",
              "description": "Unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/skills/{skillId}",
        "definition": {
          "entityName": "Skill",
          "schema": {
            "$ref": "#/backend/entities/Skill"
          },
          "description": "Stores skill information for the portfolio.",
          "params": [
            {
              "name": "skillId",
              "description": "Unique identifier for the skill."
            }
          ]
        }
      },
      {
        "path": "/about_me/{aboutMeId}",
        "definition": {
          "entityName": "AboutMe",
          "schema": {
            "$ref": "#/backend/entities/AboutMe"
          },
          "description": "Stores 'About Me' information. Only one document should exist in this collection.",
          "params": [
            {
              "name": "aboutMeId",
              "description": "Unique identifier for the 'About Me' section."
            }
          ]
        }
      },
      {
        "path": "/contact_messages/{contactMessageId}",
        "definition": {
          "entityName": "ContactMessage",
          "schema": {
            "$ref": "#/backend/entities/ContactMessage"
          },
          "description": "Stores contact messages sent via the contact form.",
          "params": [
            {
              "name": "contactMessageId",
              "description": "Unique identifier for the contact message."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to store portfolio data including projects, skills, about me information, and contact messages. The structure prioritizes simplicity and security, especially regarding authorization. All collections except contact_messages are designed for admin-only access.\n\n-   **Authorization Independence:** Since all collections except `contact_messages` are admin-managed, authorization rules are greatly simplified. `contact_messages` does not require user-based authorization.\n-   **QAPs Support:** List operations are inherently secure for `projects`, `skills`, and `about_me` since they are admin-managed and intended to be publicly accessible. Contact messages do not require list operations as they would only be viewed in the admin panel.\n-   **Structural Segregation:**  Each entity type (projects, skills, about me) resides in its own collection, ensuring homogeneous security postures. This avoids the need for complex rules based on document content.\n-   **Naming Conventions:**  Clear, semantic naming is used for all collections and fields, enhancing debuggability.\n\nThe structure avoids complex authorization logic. The `contact_messages` collection stores messages sent via the contact form."
  }
}