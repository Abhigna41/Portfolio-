/**
 * @fileOverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset provides open access to all data, except for write access which is restricted to specific roles and authenticated users. This allows for rapid prototyping and easy data exploration while still enforcing basic security principles.
 *
 * Data Structure:
 * The Firestore database contains the following top-level collections:
 * - /projects/{projectId}: Stores project information.
 * - /skills/{skillId}: Stores skill information.
 * - /about_me/{aboutMeId}: Stores "About Me" information.
 * - /contact_messages/{contactMessageId}: Stores contact messages.
 *
 * Key Security Decisions:
 * - Public Read Access: All collections are publicly readable, allowing any user to fetch and list documents.
 * - Open Writes to contact_messages: Allows unauthenticated users to submit contact form messages.
 * - No User Listing: There are no rules to read all users.
 * - Flexible Data Shapes: The rules do not enforce strict schema validation to allow for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read projects. Only authenticated users can create, update, and delete projects.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Allows read access to all, and denies write access to all.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read skills. Only authenticated users can create, update, and delete skills.
     * @path /skills/{skillId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Allows read access to all, and denies write access to all.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read "About Me" information. Only authenticated users can create, update, and delete "About Me" information.
     * @path /about_me/{aboutMeId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Allows read access to all, and denies write access to all.
     */
    match /about_me/{aboutMeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to submit contact messages without authentication.
     * @path /contact_messages/{contactMessageId}
     * @allow create: if true;
     * @allow get, list: if false; // List requires admin authentication
     * @allow update: if false;
     * @allow delete: if false;
     * @deny get: if true;
     * @deny list: if true;
     * @deny update: if true;
     * @deny delete: if true;
     * @principle Allows public write access to contact messages.
     */
    match /contact_messages/{contactMessageId} {
        allow create: if true;
      allow get, list: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}