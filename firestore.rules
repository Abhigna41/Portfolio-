/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset provides public read access to 'projects' and 'skills' collections,
 * while strictly limiting access to the 'contact_messages' collection to authenticated users only.
 *
 * Data Structure:
 * The Firestore database contains three top-level collections: 'projects', 'skills', and 'contact_messages'.
 *  - /projects/{projectId}: Stores project information.
 *  - /skills/{skillId}: Stores skill information.
 *  - /contact_messages/{contactMessageId}: Stores contact messages.
 *
 * Key Security Decisions:
 * - Projects and skills collections are readable by anyone.
 * - Contact messages can only be read or written by authenticated users.
 * - No write access is granted to unauthenticated users for any collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to projects and restricts write access to authenticated users only.
     * @path /projects/{projectId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows anyone to read project data, but requires authentication for creating, updating, or deleting projects.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to skills and restricts write access to authenticated users only.
     * @path /skills/{skillId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Allows anyone to read skill data, but requires authentication for creating, updating, or deleting skills.
     */
    match /skills/{skillId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Restricts access to contact messages to authenticated users only.
     * @path /contact_messages/{contactMessageId}
     * @allow get, list: if isSignedIn();
     * @allow create: if isSignedIn();
     * @allow update: if isSignedIn();
     * @allow delete: if isSignedIn();
     * @deny get: if false;
     * @deny list: if false;
     * @deny create: if false;
     * @deny update: if false;
     * @deny delete: if false;
     * @principle Requires authentication for all access to contact messages.
     */
    match /contact_messages/{contactMessageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}